[{
  "_id": {
    "$oid": "67ba265c265dd4bab20147d1"
  },
  "type": "MongoDB Full Assignment",
  "theory": [
    "// Question 1: What are the key differences between SQL and NoSQL databases?",
    "SQL databases use structured tables, while NoSQL (MongoDB) uses flexible document-based storage.",
    "SQL is best for complex queries and transactions, whereas NoSQL is more scalable and handles large, unstructured data efficiently.",
    "// Question 2: What makes MongoDB a good choice for modern applications?",
    "MongoDB provides schema flexibility, high scalability, and fast performance.",
    "It supports horizontal scaling, replication for fault tolerance, and powerful query capabilities, making it ideal for cloud-based applications.",
    "// Question 3: Explain the concept of collections in MongoDB.",
    "A collection in MongoDB is a group of documents, similar to a table in SQL.",
    "Collections do not have a fixed schema, allowing different documents within the same collection to have varied structures.",
    "// Question 4: How does MongoDB ensure high availability using replication?",
    "MongoDB uses replica sets to maintain multiple copies of data.",
    "A primary node handles read and write operations, while secondary nodes replicate the data.",
    "If the primary fails, a secondary node is automatically promoted to primary, ensuring availability.",
    "// Question 5: What are the main benefits of MongoDB Atlas?",
    "MongoDB Atlas is a fully managed cloud database service that provides automated backups, security features, scalability, and easy integration with cloud platforms like AWS, Azure, and Google Cloud.",
    "// Question 6: What is the role of indexes in MongoDB, and how do they improve performance?",
    "Indexes improve query performance by reducing the number of documents that need to be scanned.",
    "Types of indexes include single-field, compound, text, and geospatial indexes.",
    "However, excessive indexing can increase storage usage and slow down write operations.",
    "// Question 7: Describe the stages of the MongoDB aggregation pipeline.",
    "The aggregation pipeline processes data in multiple stages such as $match for filtering, $group for grouping data, $sort for sorting results, $project for reshaping output, and $lookup for performing joins.",
    "// Question 8: What is sharding in MongoDB? How does it differ from replication?",
    "Sharding distributes data across multiple servers to support large datasets and high throughput.",
    "Replication, on the other hand, creates copies of data across servers for redundancy and failover.",
    "// Question 9: What is PyMongo, and why is it used?",
    "PyMongo is the official Python driver for MongoDB.",
    "It allows Python applications to interact with MongoDB by performing operations like inserting, updating, querying, and deleting documents.",
    "// Question 10: What are the ACID properties in the context of MongoDB transactions?",
    "ACID properties ensure reliable transactions.",
    "MongoDB provides atomicity, consistency, isolation, and durability, though its implementation differs from traditional SQL databases by optimizing for distributed and high-performance environments.",
    "// Question 11: What is the purpose of MongoDB’s explain() function?",
    "The explain() function provides insights into how queries are executed, helping optimize performance by analyzing indexes, execution time, and query plans.",
    "// Question 12: How does MongoDB handle schema validation?",
    "MongoDB allows schema validation using JSON Schema, enforcing structure by defining required fields, data types, and validation rules.",
    "// Question 13: What is the difference between a primary and a secondary node in a replica set?",
    "A primary node handles read and write operations, while secondary nodes replicate data and serve as backups.",
    "Secondary nodes can be used for read operations in some cases.",
    "// Question 14: What security mechanisms does MongoDB provide for data protection?",
    "MongoDB provides authentication, authorization, TLS/SSL encryption, and role-based access control to secure data.",
    "// Question 15: Explain the concept of embedded documents and when they should be used.",
    "Embedded documents store related data within a single document, reducing the need for joins and improving read performance.",
    "They are useful when related data is frequently accessed together.",
    "// Question 16: What is the purpose of MongoDB’s $lookup stage in aggregation?",
    "The $lookup stage performs joins between collections, similar to SQL JOINs, allowing data from multiple collections to be combined.",
    "// Question 17: What are some common use cases for MongoDB?",
    "MongoDB is used in real-time analytics, content management systems, IoT applications, e-commerce platforms, and other scenarios requiring flexible data storage and scalability.",
    "// Question 18: What are the advantages of using MongoDB for horizontal scaling?",
    "MongoDB supports horizontal scaling by distributing data across multiple servers, improving performance, handling large datasets efficiently, and preventing single points of failure.",
    "// Question 19: How do MongoDB transactions differ from SQL transactions?",
    "MongoDB transactions are optimized for distributed environments and allow multi-document ACID transactions, but they differ from SQL in terms of strict enforcement and implementation.",
    "// Question 20: What are the main differences between capped collections and regular collections?",
    "Capped collections have a fixed size and automatically overwrite the oldest data when full.",
    "Regular collections store data permanently without size restrictions."
  ],
  "practical": [
    "db.Orders.countDocuments({})",
    "db.Orders.find({ 'Region': 'West' })",
    "db.Orders.find({ 'Sales': { '$gt': 500 } })",
    "db.Orders.find().sort({ 'Profit': -1 }).limit(3)",
    "db.Orders.updateMany({ 'Ship Mode': 'First Class' }, { '$set': { 'Ship Mode': 'Premium Class' } })",
    "db.Orders.deleteMany({ 'Sales': { '$lt': 50 } })",
    "db.Orders.aggregate([{ '$group': { '_id': '$Region', 'TotalSales': { '$sum': '$Sales' } } }])",
    "db.Orders.distinct('Ship Mode')",
    "db.Orders.aggregate([{ '$group': { '_id': '$Category', 'OrderCount': { '$sum': 1 } } }])",
    "db.Orders.find().sort({ 'Sales': -1 }).limit(1)"
  ]
}]